#include "FileManager.h"

// Global variables
String currentLogFile = "";
bool isLogging = false;
unsigned long lastLogTime = 0;
int testCounter = 0;

// Variables that main.cpp needs access to
bool autoIsOn = false;
unsigned long lastAutoCheckTime = 0;

bool setupSPIFFS() {
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed, formatting...");
    SPIFFS.format();
    if (!SPIFFS.begin()) {
      Serial.println("SPIFFS Mount Failed after formatting!");
      return false;
    }
  }

  Serial.println("SPIFFS geïnitialiseerd");
  return true;
}

void initLogDirectory() {
  if (!SPIFFS.exists(LOG_DIR)) {
    Serial.println("Logs directory bestaat niet, wordt aangemaakt...");

    if (SPIFFS.mkdir(LOG_DIR)) {
      Serial.println("Logs directory succesvol aangemaakt");
    } else {
      File dir = SPIFFS.open(LOG_DIR, FILE_WRITE);
      if (dir) {
        dir.close();
        Serial.println("Logs directory aangemaakt (oude methode)");
      } else {
        Serial.println("Failed to create logs directory");
      }
    }
  } else {
    Serial.println("Logs directory bestaat al");
  }
}

void createNewLogFile() {
  initLogDirectory();

  time_t now;
  struct tm timeinfo;
  time(&now);
  localtime_r(&now, &timeinfo);

  char timestamp[32];
  sprintf(timestamp, "%04d%02d%02d_%02d%02d%02d", timeinfo.tm_year + 1900,
          timeinfo.tm_mon + 1, timeinfo.tm_mday, timeinfo.tm_hour,
          timeinfo.tm_min, timeinfo.tm_sec);

  testCounter++;

  currentLogFile = String(LOG_DIR) + "/test_" + String(timestamp) + "_" +
                   String(testCounter) + ".csv";

  Serial.println("Attempting to create log file: " + currentLogFile);

  File file = SPIFFS.open(currentLogFile, FILE_WRITE);
  if (file) {
    // Metadata
    file.println(
        "This log file is generated by a i@control performance logger.");
    file.println("i@control wish you a lot of fun in your Alfa Romeo "
                 "4C/Giulietta QV\n\n");
    // file.println("");

    // Logging-to and following metadata, then blank line
    String loggingToFormat = String(timeinfo.tm_year + 1900);
    if (timeinfo.tm_mon + 1 < 10)
      loggingToFormat += "0";
    loggingToFormat += String(timeinfo.tm_mon + 1);
    if (timeinfo.tm_mday < 10)
      loggingToFormat += "0";
    loggingToFormat += String(timeinfo.tm_mday) + "_#" +
                       String(2021000 + testCounter) + "_000.log";
    file.println("Logging to: " + loggingToFormat);

    file.println("Application type: Performance logger");
    file.println("Software version: 1.0 Released");
    file.println("Hardware version: 8.x & 9.x");
    file.println("Car type: Alfa Romeo Giulietta QV");
    file.println("Selected car mass at start of the logging: 1940");
    file.println("Serial number: " + String(2021000 + testCounter));
    file.println("\n\n");

    // Time & Date with their own blank lines around them
    String timeStr = String(timeinfo.tm_hour) + " : ";
    if (timeinfo.tm_min < 10)
      timeStr += "0";
    timeStr += String(timeinfo.tm_min);
    file.println("Time: " + timeStr);

    String dateStr = "";
    if (timeinfo.tm_mday < 10)
      dateStr += "0";
    dateStr += String(timeinfo.tm_mday) + " ";
    if (timeinfo.tm_mon + 1 < 10)
      dateStr += "0";
    dateStr +=
        String(timeinfo.tm_mon + 1) + " " + String(timeinfo.tm_year + 1900);
    file.println("Date: " + dateStr);
    file.println("");

    // Column headers as TAB-separated row
    file.println("Time stamp\tDNA position\tAccelerator position\tThrottle "
                 "position\tSteering wheel position\t"
                 "Brake pressure\tSelected gear\tSpeed\tAtmospheric "
                 "pressure\tBoost target ECM1\tBoost ECM1\t"
                 "Boost target ECM2\tBoost ECM2\tFuel pressure\tSpark "
                 "advance\tIntake tmp\tPump speed\tEngine oil tmp\t"
                 "Coolant tmp\tGearbox oil tmp\tDiff oil tmp left\tDiff oil "
                 "tmp right\tRPM\tEngine Power\tEngine Trq\t"
                 "Used car mass\tLGf\tTGf\tOutside tmp\tTarget tmp\tSeat "
                 "tmp\tSteer tmp\tBrake LF tmp\tBrake RF tmp\t"
                 "Brake LR tmp\tBrake RR tmp\tLambda PCM1\tAFR PCM1\tTyre LF "
                 "tmp\tTyre RF tmp\tTyre LR tmp\tTyre RR tmp\t"
                 "Left tank floating valve\tRight tank floating valve\tIBS "
                 "level\tIBS voltage\t"
                 "PCM1 DTC1\tPCM1 DTC2\tPCM1 DTC3\tPCM1 DTC4\tPCM1 DTC5\tPCM1 "
                 "DTC6\tPCM1 DTC7\tPCM1 DTC8\tPCM1 DTC9\tPCM1 DTC10\t"
                 "PCM2 DTC1\tPCM2 DTC2\tPCM2 DTC3\tPCM2 DTC4\tPCM2 DTC5\tPCM2 "
                 "DTC6\tPCM2 DTC7\tPCM2 DTC8\tPCM2 DTC9\tPCM2 DTC10");

    // Units row as TAB-separated row
    file.println("sec\t#\t%\t%\tº\t%\t#"
                 "\tKMH\tmbar\tmbar\tmbar\tmbar\tmbar\tmbar\tº\tºC\t%"
                 "\tºC\tºC\tºC\tºC\tºC\t"
                 "rpm\thp\tNm\tkg\tm/s²\tm/"
                 "s²\tºC\tºC\tºC\tºC\tºC\tºC\tºC\tºC\t\t\tºC\tºC\tºC\tºC\t%\t%"
                 "\t%\tVolt\t"
                 "DTC 1\tDTC 2\tDTC 3\tDTC 4\tDTC 5\tDTC 6\tDTC 7\tDTC 8\tDTC "
                 "9\tDTC 10\t"
                 "DTC 1\tDTC 2\tDTC 3\tDTC 4\tDTC 5\tDTC 6\tDTC 7\tDTC 8\tDTC "
                 "9\tDTC 10");

    file.close();
    Serial.println("Log file initialized: " + currentLogFile);
  } else {
    Serial.println("Failed to create log file: " + currentLogFile);
    currentLogFile = "";
  }
}

void logOBD2Data() {
  if (currentLogFile.isEmpty()) {
    Serial.println("Cannot log data: No active log file");
    return;
  }

  File file = SPIFFS.open(currentLogFile, "a");
  if (file) {
    float timestamp = millis() / 1000.0;
    // … rest of your existing logOBD2Data() implementation …
    file.close();
  } else {
    Serial.println("Failed to open log file for appending: " + currentLogFile);
  }
}

void createSampleTestFile() {
  String sampleFile = String(LOG_DIR) + "/27052025_20252705.csv";

  // Only create if it doesn't exist
  if (SPIFFS.exists(sampleFile)) {
    return;
  }

  initLogDirectory();

  Serial.println("Creating sample test file: " + sampleFile);

  File file = SPIFFS.open(sampleFile, FILE_WRITE);
  if (file) {
    // Create a realistic sample file with the same format as real log files
    file.println(
        "This log file is generated by a i@control performance logger.");
    file.println("i@control wish you a lot of fun in your Alfa Romeo "
                 "4C/Giulietta QV");
    file.println("");

    file.println("Logging to: 20250521_2021001_000");
    file.println("Application type: Performance logger");
    file.println("Software version: 1.0 Released");
    file.println("Hardware version: 8.x & 9.x");
    file.println("Car type: Alfa Romeo Giulietta QV");
    file.println("Selected car mass at start of the logging: 1940");
    file.println("Serial number: 2021001");
    file.println("");

    file.println("Time: 10 : 30");
    file.println("Date:  21 05 2025");
    file.println("");

    // Headers
    file.println("Time stamp\tDNA position\tAccelerator position\tThrottle "
                 "position\tSteering wheel position\t"
                 "Brake pressure\tSelected gear\tSpeed\tAtmospheric "
                 "pressure\tBoost target ECM1\tBoost ECM1\t"
                 "Boost target ECM2\tBoost ECM2\tFuel pressure\tSpark "
                 "advance\tIntake tmp\tPump speed\tEngine oil tmp\t"
                 "Coolant tmp\tGearbox oil tmp\tDiff oil tmp left\tDiff oil "
                 "tmp right\tRPM\tEngine Power\tEngine Trq\t"
                 "Used car mass\tLGf\tTGf\tOutside tmp\tTarget tmp\tSeat "
                 "tmp\tSteer tmp\tBrake LF tmp\tBrake RF tmp\t"
                 "Brake LR tmp\tBrake RR tmp\tLambda PCM1\tAFR PCM1\tTyre LF "
                 "tmp\tTyre RF tmp\tTyre LR tmp\tTyre RR tmp\t"
                 "Left tank floating valve\tRight tank floating valve\tIBS "
                 "level\tIBS voltage\t"
                 "PCM 1\tPCM 1\tPCM 1\tPCM 1\tPCM 1\tPCM 1"
                 "\tPCM 1\tPCM 1\tPCM 1\tPCM 1\t"
                 "PCM 2\tPCM 2\tPCM 2\tPCM 2\tPCM 2\tPCM 2 "
                 "\tPCM 2\tPCM 2\tPCM 2\tPCM 2");

    // Units
    file.println("sec\t#\t%\t%\tº\t%\t#"
                 "\tKMH\tmbar\tmbar\tmbar\tmbar\tmbar\tmbar\tº\tºC\t%"
                 "\tºC\tºC\tºC\tºC\tºC\t"
                 "rpm\thp\tNm\tkg\tm/s²\tm/"
                 "s²\tºC\tºC\tºC\tºC\tºC\tºC\tºC\tºC\t\t\tºC\tºC\tºC\tºC\t%\t%"
                 "\t%\tVolt\t"
                 "DTC 1\tDTC 2\tDTC 3\tDTC 4\tDTC 5\tDTC 6\tDTC 7\tDTC 8\tDTC "
                 "9\tDTC 10\t"
                 "DTC 1\tDTC 2\tDTC 3\tDTC 4\tDTC 5\tDTC 6\tDTC 7\tDTC 8\tDTC "
                 "9\tDTC 10");

    // Add some sample data rows
    file.println(
        "7,69"
        "\t1\t25\t30\t0\t0\t3\t45\t1013\t1200\t1150\t0\t0\t3500\t15\t25\t75\t8"
        "5\t90\t45\t40\t42\t2500\t180\t320\t1940\t0.5\t0."
        "2\t22\t21\t20\t35\t180\t185\t160\t165\t0.95\t14."
        "2\t45\t48\t42\t40\t5\t8\t95\t12."
        "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println(
        "7,79"
        "\t1\t35\t40\t0\t0\t3\t52\t1013\t1300\t1250\t0\t0\t3500\t18\t28\t78\t8"
        "8\t92\t46\t41\t43\t2800\t210\t360\t1940\t0.6\t0."
        "3\t22\t21\t20\t35\t185\t190\t165\t170\t0.93\t13."
        "8\t48\t51\t45\t43\t5\t8\t95\t12."
        "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println(
        "7,89"
        "\t1\t45\t50\t0\t0\t4\t65\t1013\t1450\t1400\t0\t0\t3500\t22\t32\t82\t9"
        "2\t95\t48\t43\t45\t3200\t250\t380\t1940\t0."
        "8\t0.4\t21\t20\t35\t195\t200\t175\t175\t180\t0."
        "95\t14.2\t55\t48\t46\t5\t8\t8\t95"
        "\t12.8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println(
        "7,89"
        "\t1\t55\t60\t0\t0\t4\t75\t1013\t1600\t1550\t0\t0\t3500\t25\t35\t85\t9"
        "5\t98\t50\t45\t47\t3600\t290\t400\t1940\t0.9\t0."
        "5\t22\t21\t20\t35\t200\t205\t180\t185\t0.90\t13."
        "2\t55\t58\t52\t50\t5\t8\t95\t12."
        "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println(
        "7,99"
        "\t1\t65\t70\t0\t0\t5\t85\t1013\t1750\t1700\t0\t0\t3500\t28\t38\t88\t9"
        "8\t100\t52\t47\t49\t4000\t330\t440\t1940\t1.0\t0."
        "6\t22\t21\t20\t35\t205\t210\t185\t190\t0.89\t12."
        "9\t58\t61\t55\t53\t5\t8\t95\t12."
        "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println(
        "8,09"
        "\t1\t75\t80\t0\t0\t5\t95\t1013\t1900\t1850\t0\t0\t3500\t32\t42\t92\t10"
        "2\t105\t54\t49\t51\t4400\t370\t480\t1940\t1.1\t0."
        "7\t22\t21\t20\t35\t210\t215\t190\t195\t0.88\t12."
        "6\t61\t64\t58\t56\t5\t8\t95\t12."
        "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println("8,19"
                 "\t1\t85\t90\t0\t0\t6\t105\t1013\t2050\t2000\t0\t0\t3500\t35\t"
                 "45\t95\t10"
                 "5\t110\t56\t51\t53\t4800\t410\t520\t1940\t1.2\t0."
                 "8\t22\t21\t20\t35\t215\t220\t195\t200\t0.87\t12."
                 "3\t64\t67\t61\t59\t5\t8\t95\t12."
                 "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println("8,29"
                 "\t1\t95\t100\t0\t0\t6\t115\t1013\t2200\t2150\t0\t0\t3500\t38"
                 "\t48\t98\t10"
                 "8\t115\t58\t53\t55\t5200\t450\t560\t1940\t1.3\t0."
                 "9\t22\t21\t20\t35\t220\t225\t200\t205\t0.86\t12."
                 "0\t67\t70\t64\t62\t5\t8\t95\t12."
                 "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println("8,39"
                 "\t1\t105\t110\t0\t0\t7\t125\t1013\t2350\t2300\t0\t0\t3500\t42"
                 "\t52\t102\t11"
                 "2\t120\t60\t55\t57\t5600\t490\t600\t1940\t1.4\t1."
                 "0\t22\t21\t20\t35\t225\t230\t205\t210\t0.85\t11."
                 "7\t70\t73\t67\t65\t5\t8\t95\t12."
                 "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println("8,49"
                 "\t1\t115\t120\t0\t0\t7\t135\t1013\t2500\t2450\t0\t0\t3500\t45"
                 "\t55\t105\t11"
                 "5\t125\t62\t57\t59\t6000\t530\t640\t1940\t1.5\t1."
                 "1\t22\t21\t20\t35\t230\t235\t210\t215\t0.84\t11."
                 "4\t73\t76\t70\t68\t5\t8\t95\t12."
                 "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.println("8,59"
                 "\t1\t125\t130\t0\t0\t8\t145\t1013\t2650\t2600\t0\t0\t3500\t48"
                 "\t58\t108\t11"
                 "8\t130\t64\t59\t61\t6400\t570\t680\t1940\t1.6\t1."
                 "2\t22\t21\t20\t35\t235\t240\t215\t220\t0.83\t11."
                 "1\t76\t79\t73\t71\t5\t8\t95\t12."
                 "8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

    file.close();
    Serial.println("Sample test file created successfully");
  } else {
    Serial.println("Failed to create sample test file");
  }
}

void startLogging() {
  if (!isLogging) {
    isLogging = true;
    createNewLogFile();
    Serial.println("Logging gestart naar bestand: " + currentLogFile);
  }
}

void stopLogging() {
  if (isLogging) {
    isLogging = false;
    Serial.println("Logging gestopt");
  }
}

void processLogging() {
  if (isLogging && (millis() - lastLogTime >= LOG_INTERVAL)) {
    lastLogTime = millis();
    logOBD2Data();
  }
}

String humanReadableSize(size_t bytes) {
  if (bytes < 1024)
    return String(bytes) + " B";
  else if (bytes < (1024 * 1024))
    return String(bytes / 1024.0, 1) + " KB";
  else if (bytes < (1024 * 1024 * 1024))
    return String(bytes / 1024.0 / 1024.0, 1) + " MB";
  else
    return String(bytes / 1024.0 / 1024.0 / 1024.0, 1) + " GB";
}

String extractDateTime(String filename) {
  // Extract just the filename without path
  String basename = filename;
  int lastSlash = filename.lastIndexOf('/');
  if (lastSlash >= 0) {
    basename = filename.substring(lastSlash + 1);
  }
  
  // Try to extract from "test_YYYYMMDD_HHMMSS_X.csv" format
  int start = basename.indexOf("test_");
  if (start >= 0) {
    start += 5;
    if (start + 15 <= basename.length()) {
      String datepart = basename.substring(start, start + 8);
      String timepart = basename.substring(start + 9, start + 15);

      return datepart.substring(0, 4) + "-" + datepart.substring(4, 6) + "-" +
             datepart.substring(6, 8) + " " + timepart.substring(0, 2) + ":" +
             timepart.substring(2, 4) + ":" + timepart.substring(4, 6);
    }
  }
  
  // Try to extract from "DDMMYYYY_YYYYMMDD.csv" format (like 27052025_20252705.csv)
  if (basename.length() >= 17 && basename.indexOf('_') == 8) {
    String datepart = basename.substring(0, 8);
    if (datepart.length() == 8) {
      // Format: DDMMYYYY -> YYYY-MM-DD
      String day = datepart.substring(0, 2);
      String month = datepart.substring(2, 4);
      String year = datepart.substring(4, 8);
      return year + "-" + month + "-" + day + " 10:30:00";
    }
  }
  
  // Fallback: return today's date
  time_t now;
  struct tm timeinfo;
  time(&now);
  localtime_r(&now, &timeinfo);
  
  char todayDate[20];
  sprintf(todayDate, "%04d-%02d-%02d %02d:%02d:%02d", 
          timeinfo.tm_year + 1900,
          timeinfo.tm_mon + 1, 
          timeinfo.tm_mday,
          timeinfo.tm_hour,
          timeinfo.tm_min,
          timeinfo.tm_sec);
  
  return String(todayDate);
}